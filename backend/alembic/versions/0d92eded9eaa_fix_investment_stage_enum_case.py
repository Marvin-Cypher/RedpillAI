"""Fix investment stage enum case

Revision ID: 0d92eded9eaa
Revises: a1b2c3d4e5f6
Create Date: 2025-08-06 16:10:23.338041

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0d92eded9eaa'
down_revision = 'a1b2c3d4e5f6'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_archive_jobs_created_at', table_name='archive_jobs')
    op.drop_index('idx_archive_jobs_status_type', table_name='archive_jobs')
    op.drop_table('archive_jobs')
    op.drop_table('cache_analytics')
    op.drop_index('ix_research_analyses_company_name', table_name='research_analyses')
    op.drop_index('ix_research_analyses_workflow_id', table_name='research_analyses')
    op.drop_table('research_analyses')
    op.drop_index('ix_investment_memos_company_name', table_name='investment_memos')
    op.drop_index('ix_investment_memos_workflow_id', table_name='investment_memos')
    op.drop_table('investment_memos')
    op.drop_table('archive_policies')
    op.drop_table('api_usage_log')
    op.drop_index('ix_market_data_snapshots_symbol', table_name='market_data_snapshots')
    op.drop_index('ix_market_data_snapshots_workflow_id', table_name='market_data_snapshots')
    op.drop_table('market_data_snapshots')
    op.drop_table('realtime_data_cache')
    op.drop_index('ix_analytics_events_company_name', table_name='analytics_events')
    op.drop_index('ix_analytics_events_event_category', table_name='analytics_events')
    op.drop_index('ix_analytics_events_event_type', table_name='analytics_events')
    op.drop_index('ix_analytics_events_user_session', table_name='analytics_events')
    op.drop_index('ix_analytics_events_workflow_id', table_name='analytics_events')
    op.drop_table('analytics_events')
    op.drop_index('idx_company_cache_optimized_lookup', table_name='company_data_cache')
    op.drop_index('idx_company_cache_parallel_fetch', table_name='company_data_cache')
    op.drop_index('idx_company_cache_ttl_lookup', table_name='company_data_cache')
    op.drop_index('ix_company_data_cache_company_identifier', table_name='company_data_cache')
    op.drop_index('ix_company_data_cache_data_type', table_name='company_data_cache')
    op.drop_index('ix_company_data_cache_id', table_name='company_data_cache')
    op.drop_table('company_data_cache')
    op.drop_table('user_company_data')
    op.drop_index('ix_workflow_templates_name', table_name='workflow_templates')
    op.drop_index('ix_workflow_templates_workflow_type', table_name='workflow_templates')
    op.drop_table('workflow_templates')
    op.drop_index('ix_workflow_executions_company_name', table_name='workflow_executions')
    op.drop_index('ix_workflow_executions_workflow_id', table_name='workflow_executions')
    op.drop_index('ix_workflow_executions_workflow_type', table_name='workflow_executions')
    op.drop_table('workflow_executions')
    op.drop_index('idx_companies_name_trigram', table_name='companies', postgresql_using='gin')
    op.drop_index('idx_companies_type_sector', table_name='companies')
    op.drop_index('idx_conversations_user_type', table_name='conversations')
    op.alter_column('deals', 'co_investors',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.drop_index('idx_deals_company_status', table_name='deals')
    op.drop_index('idx_messages_archived_at', table_name='messages', postgresql_where='(archived_at IS NOT NULL)')
    op.drop_index('idx_users_email_trigram', table_name='users', postgresql_using='gin')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('idx_users_email_trigram', 'users', ['email'], unique=False, postgresql_using='gin')
    op.create_index('idx_messages_archived_at', 'messages', ['archived_at'], unique=False, postgresql_where='(archived_at IS NOT NULL)')
    op.create_index('idx_deals_company_status', 'deals', ['company_id', 'status'], unique=False)
    op.alter_column('deals', 'co_investors',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.create_index('idx_conversations_user_type', 'conversations', ['user_id', 'conversation_type'], unique=False)
    op.create_index('idx_companies_type_sector', 'companies', ['company_type', 'sector'], unique=False)
    op.create_index('idx_companies_name_trigram', 'companies', ['name'], unique=False, postgresql_using='gin')
    op.create_table('workflow_executions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('workflow_executions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('workflow_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('workflow_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('selected_tokens', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('investment_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valuation', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('current_step', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('progress_percentage', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('steps_completed', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='workflow_executions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_workflow_executions_workflow_type', 'workflow_executions', ['workflow_type'], unique=False)
    op.create_index('ix_workflow_executions_workflow_id', 'workflow_executions', ['workflow_id'], unique=True)
    op.create_index('ix_workflow_executions_company_name', 'workflow_executions', ['company_name'], unique=False)
    op.create_table('workflow_templates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('workflow_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('steps', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_tokens', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('difficulty', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('estimated_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('success_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='workflow_templates_pkey')
    )
    op.create_index('ix_workflow_templates_workflow_type', 'workflow_templates', ['workflow_type'], unique=False)
    op.create_index('ix_workflow_templates_name', 'workflow_templates', ['name'], unique=True)
    op.create_table('user_company_data',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_identifier', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('data_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('private_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_company_data_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_company_data_pkey')
    )
    op.create_table('company_data_cache',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_identifier', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('data_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('data_version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cached_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cache_hit_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_fetched', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('last_fetched_static', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='When static data (profile/funding/team) was last fetched'),
    sa.Column('last_fetched_live', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='When live data (prices/metrics) was last fetched'),
    sa.Column('data_category', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Data category: static, live, or mixed'),
    sa.Column('parallel_fetch_lock', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Lock timestamp to prevent concurrent fetches for same company'),
    sa.PrimaryKeyConstraint('id', name='company_data_cache_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_company_data_cache_id', 'company_data_cache', ['id'], unique=False)
    op.create_index('ix_company_data_cache_data_type', 'company_data_cache', ['data_type'], unique=False)
    op.create_index('ix_company_data_cache_company_identifier', 'company_data_cache', ['company_identifier'], unique=False)
    op.create_index('idx_company_cache_ttl_lookup', 'company_data_cache', ['company_identifier', 'data_type', 'last_fetched'], unique=False)
    op.create_index('idx_company_cache_parallel_fetch', 'company_data_cache', ['company_identifier', 'data_category', 'last_fetched_static'], unique=False)
    op.create_index('idx_company_cache_optimized_lookup', 'company_data_cache', ['company_identifier', 'data_type', 'last_fetched'], unique=False)
    op.create_table('analytics_events',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('event_category', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('workflow_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('company_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_session', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('event_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='analytics_events_pkey')
    )
    op.create_index('ix_analytics_events_workflow_id', 'analytics_events', ['workflow_id'], unique=False)
    op.create_index('ix_analytics_events_user_session', 'analytics_events', ['user_session'], unique=False)
    op.create_index('ix_analytics_events_event_type', 'analytics_events', ['event_type'], unique=False)
    op.create_index('ix_analytics_events_event_category', 'analytics_events', ['event_category'], unique=False)
    op.create_index('ix_analytics_events_company_name', 'analytics_events', ['company_name'], unique=False)
    op.create_table('realtime_data_cache',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('data_key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('data_payload', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='realtime_data_cache_pkey'),
    sa.UniqueConstraint('data_key', name='realtime_data_cache_data_key_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('market_data_snapshots',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workflow_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('symbol', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('current_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('open_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('high_24h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('low_24h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('volume_24h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('change_percent', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('market_cap', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('provider', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('collected_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('raw_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflow_executions.workflow_id'], name='market_data_snapshots_workflow_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='market_data_snapshots_pkey')
    )
    op.create_index('ix_market_data_snapshots_workflow_id', 'market_data_snapshots', ['workflow_id'], unique=False)
    op.create_index('ix_market_data_snapshots_symbol', 'market_data_snapshots', ['symbol'], unique=False)
    op.create_table('api_usage_log',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('api_service', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('endpoint', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('query_params', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_cached', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('cost_estimate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='api_usage_log_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='api_usage_log_pkey')
    )
    op.create_table('archive_policies',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('data_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('retention_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='archive_policies_pkey'),
    sa.UniqueConstraint('data_type', name='uq_archive_policies_data_type', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('investment_memos',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workflow_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('memo_title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('memo_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('investment_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valuation', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ownership_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('recommendation', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('executive_summary', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('full_content', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('technical_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('team_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('market_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('risk_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('overall_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('approved_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_modified', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('exported_formats', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('file_paths', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflow_executions.workflow_id'], name='investment_memos_workflow_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='investment_memos_pkey')
    )
    op.create_index('ix_investment_memos_workflow_id', 'investment_memos', ['workflow_id'], unique=False)
    op.create_index('ix_investment_memos_company_name', 'investment_memos', ['company_name'], unique=False)
    op.create_table('research_analyses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workflow_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('analysis_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('summary', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('technical_analysis', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('team_assessment', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('competitive_position', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sources_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('analysis_depth', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('agent_model', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('processing_time_seconds', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('raw_research_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflow_executions.workflow_id'], name='research_analyses_workflow_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='research_analyses_pkey')
    )
    op.create_index('ix_research_analyses_workflow_id', 'research_analyses', ['workflow_id'], unique=False)
    op.create_index('ix_research_analyses_company_name', 'research_analyses', ['company_name'], unique=False)
    op.create_table('cache_analytics',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('cache_entry_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('accessed_by_user', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('access_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('cache_hit', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['accessed_by_user'], ['users.id'], name='cache_analytics_accessed_by_user_fkey'),
    sa.ForeignKeyConstraint(['cache_entry_id'], ['company_data_cache.id'], name='cache_analytics_cache_entry_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='cache_analytics_pkey')
    )
    op.create_table('archive_jobs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('job_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='archive_jobs_pkey')
    )
    op.create_index('idx_archive_jobs_status_type', 'archive_jobs', ['status', 'job_type'], unique=False)
    op.create_index('idx_archive_jobs_created_at', 'archive_jobs', ['created_at'], unique=False)
    # ### end Alembic commands ###