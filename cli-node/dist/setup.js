"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetupWizard = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const chalk_1 = __importDefault(require("chalk"));
const boxen_1 = __importDefault(require("boxen"));
const fs_1 = require("fs");
const path_1 = require("path");
class SetupWizard {
    envPath;
    constructor() {
        this.envPath = (0, path_1.join)(process.cwd(), '.env');
    }
    async run() {
        console.clear();
        const title = (0, boxen_1.default)(chalk_1.default.blue.bold('üîß Redpill Terminal Setup') + '\n' +
            chalk_1.default.dim('Let\'s configure your API keys for the best experience'), {
            padding: 1,
            margin: 1,
            borderStyle: 'round',
            borderColor: 'blue'
        });
        console.log(title);
        const answers = await this.askForKeys();
        if (answers.skipSetup) {
            console.log(chalk_1.default.yellow('‚ö†Ô∏è  Setup skipped. Some features may be limited.'));
            return false;
        }
        await this.saveConfiguration(answers);
        this.showSuccess();
        return true;
    }
    async askForKeys() {
        console.log(chalk_1.default.bold('API Keys Setup:'));
        console.log(chalk_1.default.dim('Don\'t worry - these are stored locally and never shared.\n'));
        const questions = [
            {
                type: 'confirm',
                name: 'setupKeys',
                message: 'Would you like to configure API keys now?',
                default: true
            },
            {
                type: 'input',
                name: 'openaiKey',
                message: 'OpenAI API Key (required for natural language understanding):',
                when: (answers) => answers.setupKeys,
                validate: (input) => {
                    if (!input.trim())
                        return 'OpenAI API key is required for natural language features';
                    if (!input.startsWith('sk-'))
                        return 'OpenAI API keys start with "sk-"';
                    if (input.length < 20)
                        return 'API key seems too short';
                    return true;
                },
                transformer: (input) => {
                    // Show only first/last few characters for security
                    if (input.length > 10) {
                        return input.substring(0, 7) + '...' + input.substring(input.length - 4);
                    }
                    return input;
                }
            },
            {
                type: 'input',
                name: 'openbbToken',
                message: 'OpenBB Platform Token (optional - removes rate limits, adds premium data):',
                when: (answers) => answers.setupKeys,
                validate: (input) => {
                    if (input.trim() && input.length < 10)
                        return 'Token seems too short';
                    return true;
                }
            },
            {
                type: 'input',
                name: 'backendUrl',
                message: 'Backend URL (leave empty for default):',
                default: 'http://localhost:8000/api/v1',
                when: (answers) => answers.setupKeys
            },
            {
                type: 'confirm',
                name: 'skipSetup',
                message: 'Skip setup and continue with limited features?',
                default: false,
                when: (answers) => !answers.setupKeys
            }
        ];
        return await inquirer_1.default.prompt(questions);
    }
    async saveConfiguration(answers) {
        const envContent = this.buildEnvContent(answers);
        try {
            (0, fs_1.writeFileSync)(this.envPath, envContent);
            console.log(chalk_1.default.green('‚úÖ Configuration saved to .env file'));
        }
        catch (error) {
            console.error(chalk_1.default.red('‚ùå Failed to save configuration:'), error);
            console.log(chalk_1.default.yellow('You can manually create a .env file with:'));
            console.log(chalk_1.default.dim(envContent));
        }
    }
    buildEnvContent(answers) {
        const lines = [
            '# Redpill Terminal Configuration',
            '# Generated by setup wizard',
            ''
        ];
        if (answers.openaiKey) {
            lines.push('# OpenAI API Key for natural language understanding');
            lines.push(`OPENAI_API_KEY=${answers.openaiKey}`);
            lines.push('');
        }
        if (answers.openbbToken && answers.openbbToken.trim()) {
            lines.push('# OpenBB Platform Token for enhanced financial data');
            lines.push(`OPENBB_TOKEN=${answers.openbbToken.trim()}`);
            lines.push('');
        }
        if (answers.backendUrl) {
            lines.push('# Backend URL for full OpenBB integration');
            lines.push(`REDPILL_API_URL=${answers.backendUrl}`);
            lines.push('');
        }
        return lines.join('\n');
    }
    showSuccess() {
        const success = (0, boxen_1.default)(chalk_1.default.green.bold('üéâ Setup Complete!') + '\n\n' +
            chalk_1.default.white('Your Redpill Terminal is now configured.') + '\n' +
            chalk_1.default.dim('You can start using natural language commands immediately.'), {
            padding: 1,
            margin: 1,
            borderStyle: 'round',
            borderColor: 'green'
        });
        console.log(success);
        console.log(chalk_1.default.bold('Try these commands:'));
        console.log(chalk_1.default.dim('  ‚Ä¢ analyze Tesla\'s fundamentals'));
        console.log(chalk_1.default.dim('  ‚Ä¢ what\'s Bitcoin\'s price?'));
        console.log(chalk_1.default.dim('  ‚Ä¢ show me market news today'));
        console.log();
    }
    needsSetup() {
        // Only require setup if OpenAI API key is missing
        // OpenBB works without authentication
        return !process.env.OPENAI_API_KEY && !(0, fs_1.existsSync)(this.envPath);
    }
    async askForAPIKeyGuide() {
        console.log((0, boxen_1.default)(chalk_1.default.yellow.bold('üîë API Key Help') + '\n\n' +
            chalk_1.default.white('To get the most out of Redpill Terminal, you\'ll need API keys:') + '\n\n' +
            chalk_1.default.cyan('OpenAI API Key (Required):') + '\n' +
            chalk_1.default.dim('‚Ä¢ Visit https://platform.openai.com/api-keys') + '\n' +
            chalk_1.default.dim('‚Ä¢ Create a new API key (free tier available)') + '\n' +
            chalk_1.default.dim('‚Ä¢ Copy the key (starts with "sk-")') + '\n\n' +
            chalk_1.default.yellow('OpenBB Platform Token (Optional):') + '\n' +
            chalk_1.default.dim('‚Ä¢ OpenBB works without authentication') + '\n' +
            chalk_1.default.dim('‚Ä¢ Token removes rate limits + adds premium data') + '\n' +
            chalk_1.default.dim('‚Ä¢ Visit https://my.openbb.co/app/platform/pat') + '\n\n' +
            chalk_1.default.green('Only OpenAI key is required - OpenBB works without auth!'), {
            padding: 1,
            margin: 1,
            borderStyle: 'round',
            borderColor: 'yellow'
        }));
        const { runSetup } = await inquirer_1.default.prompt([
            {
                type: 'confirm',
                name: 'runSetup',
                message: 'Ready to configure your API keys?',
                default: true
            }
        ]);
        if (runSetup) {
            await this.run();
        }
        else {
            console.log(chalk_1.default.dim('You can run setup anytime with: redpill setup'));
        }
    }
}
exports.SetupWizard = SetupWizard;
