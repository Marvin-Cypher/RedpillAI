import inquirer from 'inquirer';
import chalk from 'chalk';
import boxen from 'boxen';
import { writeFileSync, existsSync } from 'fs';
import { join } from 'path';

export class SetupWizard {
  private envPath: string;

  constructor() {
    this.envPath = join(process.cwd(), '.env');
  }

  async run(): Promise<boolean> {
    console.clear();
    
    const title = boxen(
      chalk.blue.bold('üîß Redpill Terminal Setup') + '\n' +
      chalk.dim('Let\'s configure your API keys for the best experience'),
      {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'blue'
      }
    );

    console.log(title);
    
    const answers = await this.askForKeys();
    
    if (answers.skipSetup) {
      console.log(chalk.yellow('‚ö†Ô∏è  Setup skipped. Some features may be limited.'));
      return false;
    }

    await this.saveConfiguration(answers);
    this.showSuccess();
    
    return true;
  }

  private async askForKeys() {
    console.log(chalk.bold('API Keys Setup:'));
    console.log(chalk.dim('Don\'t worry - these are stored locally and never shared.\n'));

    const questions = [
      {
        type: 'confirm',
        name: 'setupKeys',
        message: 'Would you like to configure API keys now?',
        default: true
      },
      {
        type: 'input',
        name: 'openaiKey',
        message: 'OpenAI API Key (required for natural language understanding):',
        when: (answers: any) => answers.setupKeys,
        validate: (input: string) => {
          if (!input.trim()) return 'OpenAI API key is required for natural language features';
          if (!input.startsWith('sk-')) return 'OpenAI API keys start with "sk-"';
          if (input.length < 20) return 'API key seems too short';
          return true;
        },
        transformer: (input: string) => {
          // Show only first/last few characters for security
          if (input.length > 10) {
            return input.substring(0, 7) + '...' + input.substring(input.length - 4);
          }
          return input;
        }
      },
      {
        type: 'input',
        name: 'openbbToken',
        message: 'OpenBB Platform Token (optional - removes rate limits, adds premium data):',
        when: (answers: any) => answers.setupKeys,
        validate: (input: string) => {
          if (input.trim() && input.length < 10) return 'Token seems too short';
          return true;
        }
      },
      {
        type: 'input',
        name: 'backendUrl',
        message: 'Backend URL (leave empty for default):',
        default: 'http://localhost:8000/api/v1',
        when: (answers: any) => answers.setupKeys
      },
      {
        type: 'confirm',
        name: 'skipSetup',
        message: 'Skip setup and continue with limited features?',
        default: false,
        when: (answers: any) => !answers.setupKeys
      }
    ];

    return await inquirer.prompt(questions);
  }

  private async saveConfiguration(answers: any) {
    const envContent = this.buildEnvContent(answers);
    
    try {
      writeFileSync(this.envPath, envContent);
      console.log(chalk.green('‚úÖ Configuration saved to .env file'));
    } catch (error) {
      console.error(chalk.red('‚ùå Failed to save configuration:'), error);
      console.log(chalk.yellow('You can manually create a .env file with:'));
      console.log(chalk.dim(envContent));
    }
  }

  private buildEnvContent(answers: any): string {
    const lines = [
      '# Redpill Terminal Configuration',
      '# Generated by setup wizard',
      ''
    ];

    if (answers.openaiKey) {
      lines.push('# OpenAI API Key for natural language understanding');
      lines.push(`OPENAI_API_KEY=${answers.openaiKey}`);
      lines.push('');
    }

    if (answers.openbbToken && answers.openbbToken.trim()) {
      lines.push('# OpenBB Platform Token for enhanced financial data');
      lines.push(`OPENBB_TOKEN=${answers.openbbToken.trim()}`);
      lines.push('');
    }

    if (answers.backendUrl) {
      lines.push('# Backend URL for full OpenBB integration');
      lines.push(`REDPILL_API_URL=${answers.backendUrl}`);
      lines.push('');
    }

    return lines.join('\n');
  }

  private showSuccess() {
    const success = boxen(
      chalk.green.bold('üéâ Setup Complete!') + '\n\n' +
      chalk.white('Your Redpill Terminal is now configured.') + '\n' +
      chalk.dim('You can start using natural language commands immediately.'),
      {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'green'
      }
    );

    console.log(success);

    console.log(chalk.bold('Try these commands:'));
    console.log(chalk.dim('  ‚Ä¢ analyze Tesla\'s fundamentals'));
    console.log(chalk.dim('  ‚Ä¢ what\'s Bitcoin\'s price?'));
    console.log(chalk.dim('  ‚Ä¢ show me market news today'));
    console.log();
  }

  needsSetup(): boolean {
    // Only require setup if OpenAI API key is missing
    // OpenBB works without authentication
    return !process.env.OPENAI_API_KEY && !existsSync(this.envPath);
  }

  async askForAPIKeyGuide(): Promise<void> {
    console.log(boxen(
      chalk.yellow.bold('üîë API Key Help') + '\n\n' +
      chalk.white('To get the most out of Redpill Terminal, you\'ll need API keys:') + '\n\n' +
      chalk.cyan('OpenAI API Key (Required):') + '\n' +
      chalk.dim('‚Ä¢ Visit https://platform.openai.com/api-keys') + '\n' +
      chalk.dim('‚Ä¢ Create a new API key (free tier available)') + '\n' +
      chalk.dim('‚Ä¢ Copy the key (starts with "sk-")') + '\n\n' +
      chalk.yellow('OpenBB Platform Token (Optional):') + '\n' +
      chalk.dim('‚Ä¢ OpenBB works without authentication') + '\n' +
      chalk.dim('‚Ä¢ Token removes rate limits + adds premium data') + '\n' +
      chalk.dim('‚Ä¢ Visit https://my.openbb.co/app/platform/pat') + '\n\n' +
      chalk.green('Only OpenAI key is required - OpenBB works without auth!'),
      {
        padding: 1,
        margin: 1,
        borderStyle: 'round',
        borderColor: 'yellow'
      }
    ));

    const { runSetup } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'runSetup',
        message: 'Ready to configure your API keys?',
        default: true
      }
    ]);

    if (runSetup) {
      await this.run();
    } else {
      console.log(chalk.dim('You can run setup anytime with: redpill setup'));
    }
  }
}