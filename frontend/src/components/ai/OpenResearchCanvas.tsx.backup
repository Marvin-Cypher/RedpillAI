'use client'

import { useState, useRef, useEffect, useCallback } from 'react'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Card } from '@/components/ui/card'
import { ScrollArea } from '@/components/ui/scroll-area'
import { 
  MessageSquare, 
  X, 
  Send, 
  Bot, 
  User, 
  Search,
  Brain,
  History,
  Star,
  Check,
  Loader2,
  Maximize2,
  Minimize2,
  FileText,
  ChevronRight,
  RefreshCw,
  Save
} from 'lucide-react'
import { VCAssistant } from '@/lib/ai/vc-assistant'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism'

interface ResearchSection {
  id: string
  title: string
  content: string
  status: 'pending' | 'in_progress' | 'completed'
  order: number
  approved?: boolean
  timestamp?: string
}

interface ProposalSection {
  title: string
  description: string
  approved: boolean
  index: number
}

interface Proposal {
  sections: ProposalSection[]
  timestamp: Date
  approved?: boolean
  remarks?: string
}

interface ApprovalFlow {
  isActive: boolean
  proposedPlan: string
  isExecuting: boolean
}

interface Message {
  id: string
  content: string
  sender: 'user' | 'ai'
  timestamp: Date
  type?: 'text' | 'research' | 'loading'
  sections?: ResearchSection[]
  chatId?: string
  isStarred?: boolean
  metadata?: {
    reasoning?: string
    confidence?: number
    sources?: string[]
    model?: string
    usage?: any
    chat_id?: string
    timestamp?: string
  }
}

interface OpenResearchCanvasProps {
  projectId?: string
  projectName?: string
  projectType?: 'company' | 'deal' | 'open'
  memoId?: string
  isOpen?: boolean
  onClose?: () => void
  onSaveMemo?: (memo: { title: string; content: string; chatId: string; sections?: ResearchSection[] }) => void
}

export function OpenResearchCanvas({ 
  projectId, 
  projectName = 'Dashboard', 
  projectType = 'open',
  memoId,
  isOpen = true,
  onClose,
  onSaveMemo
}: OpenResearchCanvasProps) {
  console.log('OpenResearchCanvas render:', { projectId, projectName, projectType, memoId, isOpen })
  const [isExpanded, setIsExpanded] = useState(false)
  const [messages, setMessages] = useState<Message[]>([])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [researchSections, setResearchSections] = useState<ResearchSection[]>([])
  const [approvedSections, setApprovedSections] = useState<number[]>([])
  const [currentChatId, setCurrentChatId] = useState<string | null>(null)
  const [vcAssistant] = useState(() => new VCAssistant('mock-key'))
  const [streamingContent, setStreamingContent] = useState<string>('')
  const [selectedSection, setSelectedSection] = useState<string | null>(null)
  const [documentZoom, setDocumentZoom] = useState(100)
  const [currentProposal, setCurrentProposal] = useState<Proposal | null>(null)
  const [reviewedProposal, setReviewedProposal] = useState<Proposal | null>(null)
  const [proposalRemarks, setProposalRemarks] = useState('')
  const [approvalFlow, setApprovalFlow] = useState<ApprovalFlow>({
    isActive: false,
    proposedPlan: '',
    isExecuting: false
  })
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const chatContainerRef = useRef<HTMLDivElement>(null)
  const chatIdRef = useRef<string | null>(null)

  // Load memo if provided
  useEffect(() => {
    if (memoId && isOpen) {
      loadMemo(memoId)
    }
  }, [memoId, isOpen])

  const loadMemo = async (memoId: string) => {
    try {
      // Load memo from localStorage or API
      const memos = JSON.parse(localStorage.getItem(`memos-${projectId}`) || '[]')
      const memo = memos.find((m: any) => m.id === memoId)
      
      if (memo) {
        setCurrentChatId(memo.chatId)
        chatIdRef.current = memo.chatId
        setIsExpanded(true)
        
        // Recreate the conversation
        const aiMessage: Message = {
          id: memo.id,
          content: memo.content,
          sender: 'ai',
          timestamp: new Date(memo.date),
          type: 'research',
          chatId: memo.chatId,
          sections: memo.sections || []
        }
        
        setMessages([aiMessage])
        setResearchSections(memo.sections || [])
      }
    } catch (error) {
      console.error('Error loading memo:', error)
    }
  }

  const scrollToBottom = useCallback(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [])

  useEffect(() => {
    scrollToBottom()
  }, [messages, scrollToBottom])

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isTyping) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputValue,
      sender: 'user',
      timestamp: new Date(),
      type: 'text'
    }

    setMessages(prev => [...prev, userMessage])
    const currentInput = inputValue
    setInputValue('')
    setIsTyping(true)
    setStreamingContent('')

    try {
      // Check if this should trigger approval workflow
      if (currentInput.toLowerCase().includes('research plan') || 
          currentInput.toLowerCase().includes('analysis outline') ||
          currentInput.toLowerCase().includes('study proposal')) {
        
        setApprovalFlow({
          isActive: true,
          proposedPlan: `I propose to conduct comprehensive research on ${projectName} covering:
1. Market analysis and competitive positioning
2. Financial performance evaluation  
3. Technical assessment and innovation review
4. Risk analysis and mitigation strategies
5. Investment recommendation with supporting data

Would you like me to proceed with this research structure?`,
          isExecuting: false
        })
        
        setIsTyping(false)
        return
      }

      // Show streaming progress
      setStreamingContent('🔍 **Analyzing your question...**\n\nStarting research process...')
      
      // Call backend AI chat endpoint
      const backendResponse = await fetch('http://localhost:8000/api/v1/chat/ai-chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: currentInput,
          project_id: projectId,
          project_type: projectType,
          conversation_history: messages.map(msg => ({
            role: msg.sender,
            content: msg.content,
            timestamp: msg.timestamp
          }))
        })
      })

      // Update streaming content
      setStreamingContent('🧠 **Processing with AI...**\n\nGathering relevant information and generating insights...')

      if (!backendResponse.ok) {
        throw new Error(`Backend error: ${backendResponse.status}`)
      }

      const backendData = await backendResponse.json()
      
      // Store chat ID
      if (backendData.chat_id && !chatIdRef.current) {
        setCurrentChatId(backendData.chat_id)
        chatIdRef.current = backendData.chat_id
        
        // Expand to canvas on first response
        if (!isExpanded) {
          setIsExpanded(true)
        }
      }

      // Update streaming with final content
      setStreamingContent('✅ **Research Complete**\n\nFinalizing analysis and formatting results...')

      // Small delay to show completion
      await new Promise(resolve => setTimeout(resolve, 500))

      // Create AI response message
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        content: backendData.content || 'No response',
        sender: 'ai',
        timestamp: new Date(),
        type: 'research',
        chatId: backendData.chat_id,
        metadata: {
          reasoning: backendData.reasoning_content,
          confidence: 0.85,
          sources: ['Internal Analysis', 'Market Data'],
          model: backendData.model,
          usage: backendData.usage,
          chat_id: backendData.chat_id,
          timestamp: new Date().toISOString()
        }
      }

      setMessages(prev => [...prev, aiResponse])
      setStreamingContent('')

    } catch (error) {
      console.error('Chat error:', error)
      setStreamingContent('')
      const errorMessage: Message = {
        id: (Date.now() + 2).toString(),
        content: 'I apologize, but I encountered an error. Please try again.',
        sender: 'ai',
        timestamp: new Date(),
        type: 'text'
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsTyping(false)
    }
  }

  const handleApproval = (index: number, content: string) => {
    setApprovedSections(prev => [...prev, index])
    
    const newSection: ResearchSection = {
      id: `approved-${index}`,
      title: `Research Section ${index + 1}`,
      content: content,
      status: 'completed',
      order: index,
      approved: true,
      timestamp: new Date().toISOString()
    }
    
    setResearchSections(prev => [...prev, newSection])
  }

  const handleRegenerate = async (index: number) => {
    const message = messages[index]
    if (!message || message.sender !== 'ai') return
    
    setIsTyping(true)
    setStreamingContent('🔄 **Regenerating response...**\n\nCreating improved analysis...')
    
    try {
      // Call backend to regenerate
      const backendResponse = await fetch('http://localhost:8000/api/v1/chat/ai-chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: `Please regenerate and improve the previous response about: ${message.content.substring(0, 100)}...`,
          project_id: projectId,
          project_type: projectType,
          conversation_history: messages.slice(0, index).map(msg => ({
            role: msg.sender,
            content: msg.content,
            timestamp: msg.timestamp
          }))
        })
      })

      if (backendResponse.ok) {
        const backendData = await backendResponse.json()
        
        // Update the message in place
        setMessages(prev => prev.map((msg, idx) => 
          idx === index ? {
            ...msg,
            content: backendData.content || msg.content,
            metadata: {
              ...msg.metadata,
              model: backendData.model,
              usage: backendData.usage,
              chat_id: backendData.chat_id
            }
          } : msg
        ))
      }
    } catch (error) {
      console.error('Regeneration error:', error)
    } finally {
      setIsTyping(false)
      setStreamingContent('')
    }
  }

  const handleSaveMemo = (content: string) => {
    if (!currentChatId) return

    const memo = {
      id: `memo-${Date.now()}`,
      title: `Research Memo - ${projectName}`,
      content: content,
      chatId: currentChatId,
      date: new Date().toISOString(),
      author: 'AI Research Assistant',
      sections: researchSections
    }

    // Save to localStorage
    const existingMemos = JSON.parse(localStorage.getItem(`memos-${projectId}`) || '[]')
    existingMemos.push(memo)
    localStorage.setItem(`memos-${projectId}`, JSON.stringify(existingMemos))

    // Trigger memo update event
    window.dispatchEvent(new Event('memoUpdated'))

    // Call parent callback if provided
    onSaveMemo?.(memo)
  }

  const handleApproveResearchPlan = async () => {
    setApprovalFlow(prev => ({ ...prev, isExecuting: true }))
    
    // Simulate execution of research plan
    const researchSections = [
      'Market Analysis',
      'Financial Performance',
      'Technical Assessment', 
      'Risk Analysis',
      'Investment Recommendation'
    ]
    
    for (const section of researchSections) {
      setStreamingContent(`📝 **Executing: ${section}**\n\nAnalyzing ${section.toLowerCase()} for ${projectName}...`)
      
      try {
        const backendResponse = await fetch('http://localhost:8000/api/v1/chat/ai-chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message: `Generate detailed ${section} for ${projectName}. Provide comprehensive analysis with data, insights, and professional VC perspective.`,
            project_id: projectId,
            project_type: projectType,
            conversation_history: messages.map(msg => ({
              role: msg.sender,
              content: msg.content,
              timestamp: msg.timestamp
            }))
          })
        })

        if (backendResponse.ok) {
          const backendData = await backendResponse.json()
          
          const aiMessage: Message = {
            id: `research-${Date.now()}`,
            content: backendData.content || `## ${section}\n\nDetailed analysis of ${section.toLowerCase()} for ${projectName}...`,
            sender: 'ai',
            timestamp: new Date(),
            type: 'research',
            chatId: currentChatId,
            metadata: {
              reasoning: backendData.reasoning_content,
              confidence: 0.85,
              sources: ['Research Analysis', 'Market Data'],
              model: backendData.model,
              usage: backendData.usage,
              chat_id: backendData.chat_id
            }
          }
          
          setMessages(prev => [...prev, aiMessage])
        }
      } catch (error) {
        console.error(`Error generating ${section}:`, error)
      }
      
      await new Promise(resolve => setTimeout(resolve, 1000))
    }
    
    setStreamingContent('')
    setApprovalFlow({ isActive: false, proposedPlan: '', isExecuting: false })
  }

  const handleRejectResearchPlan = () => {
    setApprovalFlow({ isActive: false, proposedPlan: '', isExecuting: false })
    
    const rejectionMessage: Message = {
      id: Date.now().toString(),
      content: "I understand you'd like a different approach. Please let me know what specific research areas you'd like me to focus on instead.",
      sender: 'ai',
      timestamp: new Date(),
      type: 'text'
    }
    
    setMessages(prev => [...prev, rejectionMessage])
  }

  if (!isOpen) return null

  // Sidebar mode - before expansion
  if (!isExpanded) {
    return (
      <div className="fixed right-4 bottom-4 z-40 w-96 bg-white rounded-lg shadow-2xl border border-gray-200 overflow-hidden">
        <div className="p-4 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-purple-50">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center">
                <Bot className="w-4 h-4 text-white" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900">AI Research Assistant</h3>
                <p className="text-xs text-gray-600">
                  {projectName} | {currentChatId || 'Starting...'}
                </p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </div>

        <ScrollArea className="h-96">
          <div className="p-4 space-y-4">
            {messages.map((message) => (
              <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`max-w-[85%] ${
                  message.sender === 'user'
                    ? 'bg-blue-600 text-white rounded-2xl rounded-br-md'
                    : 'bg-gray-100 text-gray-900 rounded-2xl rounded-bl-md'
                } px-4 py-2`}>
                  <p className="text-sm">{message.content}</p>
                </div>
              </div>
            ))}
            {isTyping && (
              <div className="flex items-center space-x-2 text-gray-500">
                <Loader2 className="w-4 h-4 animate-spin" />
                <span className="text-sm">AI is thinking...</span>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </ScrollArea>

        <div className="p-4 border-t">
          <div className="flex space-x-2">
            <input
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="Ask anything..."
              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              disabled={isTyping}
            />
            <Button 
              onClick={handleSendMessage}
              disabled={!inputValue.trim() || isTyping}
              size="sm"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>
    )
  }

  // Expanded canvas mode
  return (
    <div className="fixed inset-0 z-50 bg-white flex">
      {/* Left side - Research Canvas */}
      <div className="w-1/2 bg-white overflow-y-auto border-r border-gray-200">
        <div className="p-6">
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-gray-900 flex items-center">
              <FileText className="w-5 h-5 mr-2" />
              Research Document
            </h3>
            <p className="text-sm text-gray-600 mt-1">
              {projectName} Analysis | Chat ID: {currentChatId}
            </p>
          </div>

          {messages.filter(m => m.sender === 'ai').length === 0 && !streamingContent ? (
            <div className="flex items-center justify-center h-full">
              <div className="text-center max-w-md">
                <Search className="w-16 h-16 text-gray-300 mx-auto mb-6" />
                <h3 className="text-xl font-semibold text-gray-700 mb-3">
                  Start by asking a research question
                </h3>
                <p className="text-gray-500 text-sm leading-relaxed">
                  Ask detailed questions about {projectName} and I'll help you conduct comprehensive research and analysis.
                </p>
              </div>
            </div>
          ) : (
            <div 
              className="research-document font-noto"
              style={{ 
                transform: `scale(${documentZoom / 100})`,
                transformOrigin: 'top left',
                minHeight: '100%'
              }}
            >
              {/* Show streaming content first if available */}
              {streamingContent && (
                <div className="mb-8 p-6 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="flex items-center mb-4">
                    <Loader2 className="w-4 h-4 text-blue-600 animate-spin mr-2" />
                    <h4 className="font-semibold text-blue-900">Researching...</h4>
                  </div>
                  <div className="prose prose-sm max-w-none">
                    <ReactMarkdown remarkPlugins={[remarkGfm]}>
                      {streamingContent}
                    </ReactMarkdown>
                  </div>
                </div>
              )}

              {/* Display actual AI research responses */}
              {messages.filter(m => m.sender === 'ai').map((message, index) => (
                <div key={index} className="mb-8">
                  <div className="prose prose-sm max-w-none leading-relaxed text-gray-800">
                    <ReactMarkdown remarkPlugins={[remarkGfm]}>
                      {message.content}
                    </ReactMarkdown>
                  </div>
                  
                  {/* Research approval buttons below each AI response */}
                  {!approvedSections.includes(index) && (
                    <div className="mt-4 pt-4 border-t border-gray-200">
                      <div className="flex gap-2">
                        <Button
                          onClick={() => handleApproval(index, message.content)}
                          size="sm"
                          variant="outline"
                          className="text-green-600 border-green-200 hover:bg-green-50"
                        >
                          <Check className="w-4 h-4 mr-1" />
                          Approve Section
                        </Button>
                        <Button
                          onClick={() => handleRegenerate(index)}
                          size="sm"
                          variant="outline"
                          className="text-blue-600 border-blue-200 hover:bg-blue-50"
                        >
                          <RefreshCw className="w-4 h-4 mr-1" />
                          Regenerate
                        </Button>
                        <Button
                          onClick={() => handleSaveMemo(message.content)}
                          size="sm"
                          variant="outline"
                          className="text-purple-600 border-purple-200 hover:bg-purple-50"
                        >
                          <Save className="w-4 h-4 mr-1" />
                          Save as Memo
                        </Button>
                      </div>
                    </div>
                  )}

                  {/* Show metadata if available */}
                  {message.metadata && (
                    <div className="mt-4 p-3 bg-gray-50 rounded text-sm text-gray-600">
                      <div className="grid grid-cols-2 gap-2">
                        <div>Model: {message.metadata.model}</div>
                        <div>Tokens: {message.metadata.usage?.total_tokens || 'N/A'}</div>
                        <div>Time: {message.metadata.timestamp}</div>
                        <div>Chat ID: {message.metadata.chat_id}</div>
                      </div>
                    </div>
                  )}
                </div>
              ))}

              {/* Show research sections if any */}
              {researchSections.length > 0 && (
                <div className="mt-12 border-t pt-8">
                  <h3 className="text-lg font-semibold mb-6 text-gray-900">Approved Research Sections</h3>
                  {researchSections.map((section, index) => (
                    <div key={index} className="mb-8 p-6 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center">
                          <Check className="w-5 h-5 text-green-600 mr-2" />
                          <span className="font-medium text-green-900">Approved Section {index + 1}</span>
                        </div>
                        <Button
                          onClick={() => handleSaveMemo(section.content)}
                          size="sm"
                          variant="outline"
                          className="text-purple-600 border-purple-200 hover:bg-purple-50"
                        >
                          <Save className="w-4 h-4 mr-1" />
                          Save as Memo
                        </Button>
                      </div>
                      <div className="prose prose-sm max-w-none">
                        <ReactMarkdown remarkPlugins={[remarkGfm]}>
                          {section.content}
                        </ReactMarkdown>
                      </div>
                      <div className="mt-4 text-sm text-green-700">
                        Approved: {new Date(section.timestamp || Date.now()).toLocaleString()}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Right side - Chat */}
      <div className="w-1/2 bg-white flex flex-col">
        {/* Header */}
        <div className="p-4 border-b border-gray-200 bg-gradient-to-r from-blue-500 to-purple-600">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <MessageSquare className="w-5 h-5 text-white mr-2" />
              <h3 className="text-lg font-semibold text-white">AI Research Assistant</h3>
            </div>
            <div className="flex items-center gap-2">
              {currentChatId && (
                <span className="text-xs bg-white/20 text-white px-2 py-1 rounded">
                  {currentChatId}
                </span>
              )}
              <Button
                onClick={onClose}
                size="sm"
                variant="ghost"
                className="text-white hover:bg-white/10"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </div>
          <p className="text-sm text-blue-100 mt-1">
            Project: {projectName}
          </p>
        </div>

        {/* Messages */}
        <div 
          ref={chatContainerRef}
          className="flex-1 overflow-y-auto p-4 space-y-4"
        >
          {messages.map((message, index) => (
            <div key={index} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`max-w-[85%] rounded-lg px-4 py-2 ${
                message.sender === 'user' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-100 text-gray-900'
              }`}>
                <div className="text-sm">
                  <ReactMarkdown remarkPlugins={[remarkGfm]}>
                    {message.content}
                  </ReactMarkdown>
                </div>
                {message.metadata && (
                  <div className="text-xs opacity-70 mt-1">
                    {message.metadata.timestamp}
                  </div>
                )}
              </div>
            </div>
          ))}
          
          {streamingContent && (
            <div className="flex justify-start">
              <div className="max-w-[85%] rounded-lg px-4 py-2 bg-gray-100 text-gray-900">
                <div className="flex items-center">
                  <Loader2 className="w-4 h-4 animate-spin mr-2" />
                  <span className="text-sm">Researching...</span>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Approval Flow - Show at bottom if active */}
        {approvalFlow.isActive && (
          <div className="border-t border-gray-200 bg-gray-50 p-4">
            <div className="mb-3">
              <h4 className="font-medium text-gray-900 mb-2">Research Plan Approval</h4>
              <div className="text-sm text-gray-600 bg-white p-3 rounded border">
                {approvalFlow.proposedPlan}
              </div>
            </div>
            <div className="flex gap-2">
              <Button
                onClick={handleApproveResearchPlan}
                size="sm"
                variant="default"
                className="bg-green-600 hover:bg-green-700 text-white"
                disabled={approvalFlow.isExecuting}
              >
                <Check className="w-4 h-4 mr-1" />
                {approvalFlow.isExecuting ? 'Executing...' : 'Approve & Execute'}
              </Button>
              <Button
                onClick={handleRejectResearchPlan}
                size="sm"
                variant="outline"
                disabled={approvalFlow.isExecuting}
              >
                <X className="w-4 h-4 mr-1" />
                Reject Plan
              </Button>
            </div>
          </div>
        )}

        {/* Input */}
        <div className="p-4 border-t border-gray-200">
          <div className="flex gap-2">
            <input
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="Ask me anything about this project..."
              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              disabled={isTyping}
            />
            <Button
              onClick={handleSendMessage}
              disabled={!inputValue.trim() || isTyping}
              size="sm"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}