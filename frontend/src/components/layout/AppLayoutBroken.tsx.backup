'use client'

import { useEffect } from 'react'
import { useRouter, usePathname } from 'next/navigation'
import { Navigation, TopBar } from './Navigation'
import { ThemeProvider } from '@/components/theme/ThemeProvider'
import { UnifiedAISystem, FloatingAIButton } from '@/components/ai'
import { useAuthStore } from '@/lib/stores/authStore'

interface AppLayoutProps {
  children: React.ReactNode
}

// Auth guard component
function AuthGuard({ children }: { children: React.ReactNode }) {
  // Always call hooks at the top level
  const router = useRouter()
  const pathname = usePathname()
  const { isAuthenticated, isLoading, checkAuth } = useAuthStore()
  
  // DEMO MODE: Bypass authentication for testing
  const DEMO_MODE = true // Set to false to re-enable authentication
  
  if (DEMO_MODE) {
    console.log('ðŸ”“ Demo mode active - authentication bypassed')
    return <>{children}</>
  }

  // Check authentication status on mount and route changes
  useEffect(() => {
    // Skip auth check for public routes
    const publicRoutes = ['/login', '/simple-login', '/direct-login']
    if (publicRoutes.includes(pathname)) {
      return
    }

    // Demo mode bypass - check for demo token
    const demoToken = localStorage.getItem('access_token')
    if (demoToken) {
      // Set demo user and skip auth check
      const demoUser = { id: 'demo-user', email: 'user@redpill.vc', name: 'Demo User' }
      const { setUser } = useAuthStore.getState()
      setUser(demoUser)
      return
    }

    // Always check auth status with the server (for HTTP-only cookies)
    checkAuth()
  }, [pathname, checkAuth])

  useEffect(() => {
    // Skip auth check for public routes
    const publicRoutes = ['/login', '/simple-login', '/direct-login']
    if (publicRoutes.includes(pathname)) {
      return
    }

    // Redirect to login if not authenticated and not loading
    if (!isLoading && !isAuthenticated) {
      const returnUrl = encodeURIComponent(pathname)
      router.push(`/login?returnUrl=${returnUrl}`)
    }
  }, [isAuthenticated, isLoading, pathname, router])

  // Show loading screen while checking auth
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600" />
      </div>
    )
  }

  // Show login redirect message if not authenticated
  if (!isAuthenticated && pathname !== '/login') {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4" />
          <p className="text-gray-600">Redirecting to login...</p>
        </div>
      </div>
    )
  }

  return <>{children}</>
}

export function AppLayout({ children }: AppLayoutProps) {
  const pathname = usePathname()
  const isLoginPage = pathname === '/login'

  return (
    <ThemeProvider>
      <AuthGuard>
        <UnifiedAISystem
          globalProjectType="open"
          globalProjectName="RedPill VC Platform"
          enableAI={true}
        >
          {(aiContext) => (
            <>
              {isLoginPage ? (
                // Render login page without navigation
                <div className="min-h-screen">
                  {children}
                </div>
              ) : (
                // Render normal app layout with navigation
                <div className="min-h-screen bg-gray-50">
                  <Navigation />
                  <TopBar />
                  
                  <main className="lg:pl-64 w-full overflow-x-hidden">
                    <div className="w-full max-w-none lg:max-w-7xl mx-auto">
                      {children}
                    </div>
                  </main>
                </div>
              )}
            </>
          )}
        </UnifiedAISystem>
      </AuthGuard>
    </ThemeProvider>
  )
}